package database;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;

import model.Customer;

public class CustomerDAO implements DAOInterface<Customer> {

	public static CustomerDAO getInstance() {
		return new CustomerDAO();
	}

	@Override
	public int insert(Customer t) {
		Customer customer = this.selectById(t);
		if (customer == null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "INSERT INTO customers (customerId, customerName, userName, password, "
						+ "gender, address, receiAddress, buyAddress, dob, phoneNumber, email, isRecei_email)"
						+ " VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, t.getCustomerId());
				pStatement.setString(2, t.getCustomerName());
				pStatement.setString(3, t.getUsername());
				pStatement.setString(4, t.getPassword());
				pStatement.setString(5, t.getGender());
				pStatement.setString(6, t.getAddress());
				pStatement.setString(7, t.getreceiAddress());
				pStatement.setString(8, t.getbuyAddress());
				pStatement.setDate(9, t.getDob());
				pStatement.setString(10, t.getPhoneNumber());
				pStatement.setString(11, t.getEmail());
				pStatement.setInt(12, t.isRecei_email());
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}

	@Override
	public int insertAll(ArrayList<Customer> list) {
		int count = 0;
		for (Customer customer : list) {
			count += this.insert(customer);
		}
		return count;
	}

	@Override
	public Customer selectById(Customer t) {
		try {
			Connection connection = JDBCUtil.getConnection();
			String url = "SELECT* FROM customers WHERE customerId = ?";
			PreparedStatement pStatement = connection.prepareStatement(url);
			pStatement.setString(1, t.getCustomerId());
			ResultSet rs = pStatement.executeQuery();

			while (rs.next()) {
				String customerId = rs.getString("customerId");
				String customerName = rs.getString("customerName");
				String userName = rs.getString("userName");
				String password = rs.getString("password");
				String gender = rs.getString("gender");
				String address = rs.getString("address");
				String receiAddress = rs.getString("receiAddress");
				String buyAddress = rs.getString("buyAddress");
				Date dob = rs.getDate("dob");
				String phoneNumber = rs.getString("phoneNumber");
				String email = rs.getString("email");
				Integer isRecei_email = rs.getInt("isRecei_email");
				String valiCode = rs.getString("valiCode");
				LocalDateTime timeEffective;
				if (!rs.getTimestamp("timeEffective")==null) {
					
					timeEffective= rs.getTimestamp("timeEffective").toLocalDateTime();
				}
				Integer valiStatus = rs.getInt("valiStatus");
				
				return new Customer(customerId, customerName, userName, password, gender, address, receiAddress, buyAddress, dob, phoneNumber, email, isRecei_email, valiCode, timeEffective, valiStatus);
			}
			JDBCUtil.closeConnection(connection);
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}

	@Override
	public ArrayList<Customer> selectAll() {
		ArrayList<Customer> data = new ArrayList<Customer>();
		try {
			Connection connection = JDBCUtil.getConnection();
			String url = "SELECT* FROM customers";
			PreparedStatement pStatement = connection.prepareStatement(url);
			ResultSet rs = pStatement.executeQuery();

			while (rs.next()) {
				String customerId = rs.getString("customerId");
				String customerName = rs.getString("customerName");
				String userName = rs.getString("userName");
				String password = rs.getString("password");
				String gender = rs.getString("gender");
				String address = rs.getString("address");
				String receiAddress = rs.getString("receiAddress");
				String buyAddress = rs.getString("buyAddress");
				Date dob = rs.getDate("dob");
				String phoneNumber = rs.getString("phoneNumber");
				String email = rs.getString("email");
				Integer isRecei_email = rs.getInt("isRecei_email");
				Customer customer =  new Customer(customerId, customerName, userName, password, gender, address, receiAddress, buyAddress, dob, phoneNumber, email, isRecei_email);
				data.add(customer);
			}

			JDBCUtil.closeConnection(connection);
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return data;
	}

	@Override
	public int update(Customer t) {
		Customer customer = this.selectById(t);
		if (customer != null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "UPDATE customers "
						+ "SET customerId=?,customerName=?,userName=?,password=?,gender=?,address=?,"
						+ "receiAddress=?,buyAddress=?,dob=?,phoneNumber=?,email=?,isRecei_email=? "
						+ "WHERE customerId = ?";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, t.getCustomerId());
				pStatement.setString(2, t.getCustomerName());
				pStatement.setString(3, t.getUsername());
				pStatement.setString(4, t.getPassword());
				pStatement.setString(5, t.getGender());
				pStatement.setString(6, t.getAddress());
				pStatement.setString(7, t.getreceiAddress());
				pStatement.setString(8, t.getbuyAddress());
				pStatement.setDate(9, t.getDob());
				pStatement.setString(10, t.getPhoneNumber());
				pStatement.setString(11, t.getEmail());
				pStatement.setInt(12, t.isRecei_email());
				pStatement.setString(13, t.getCustomerId());
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}
	public int updateValiInfo(Customer t) {
		Customer customer = this.selectById(t);
		if (customer != null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "UPDATE customers "
						+ "SET valiCode=?, timeEffective=?, valiStatus=? "
						+ "WHERE customerId = ?";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, t.getValiCode());
				pStatement.setTimestamp(2, Timestamp.valueOf(t.getTimeEffective()));;
				pStatement.setInt(3, t.getValiStatus());
				pStatement.setString(4, t.getCustomerId());
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}
	
	public int updatePass(Customer t, String pass) {
		Customer customer = this.selectById(t);
		if (customer != null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "UPDATE customers SET password=? WHERE customerId = ?";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, pass);
				pStatement.setString(2, t.getCustomerId());
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}
	public int updateInfo(Customer t) {
		Customer customer = this.selectById(t);
		if (customer != null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "UPDATE customers "
						+ "SET customerId=?, customerName=?, gender=?, address=?,"
						+ "receiAddress=?, buyAddress=?, dob=?, phoneNumber=?, email=? "
						+ "WHERE customerId = ?";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, t.getCustomerId());
				pStatement.setString(2, t.getCustomerName());
				pStatement.setString(3, t.getGender());
				pStatement.setString(4, t.getAddress());
				pStatement.setString(5, t.getreceiAddress());
				pStatement.setString(6, t.getbuyAddress());
				pStatement.setDate(7, t.getDob());
				pStatement.setString(8, t.getPhoneNumber());
				pStatement.setString(9, t.getEmail());
				pStatement.setString(10, t.getCustomerId());
				
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}

	@Override
	public int delete(Customer t) {
		Customer customer = this.selectById(t);
		if (customer != null) {
			try {
				Connection connection = JDBCUtil.getConnection();
				String url = "DELETE FROM customers WHERE customerId = ?";
				PreparedStatement pStatement = connection.prepareStatement(url);
				pStatement.setString(1, t.getCustomerId());
				int rs = pStatement.executeUpdate();
				JDBCUtil.closeConnection(connection);
				return rs;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		return 0;
	}

	@Override
	public int deleteAll(ArrayList<Customer> list) {
		int count = 0;
		for (Customer customer : list) {
			count += this.delete(customer);
		}
		return count;
	}
	
	public boolean hasUserName(String useName) {
		try {
			Connection connection = JDBCUtil.getConnection();
			String url = "SELECT* FROM customers WHERE userName = ?";
			PreparedStatement pStatement = connection.prepareStatement(url);
			pStatement.setString(1, useName);
			ResultSet rs = pStatement.executeQuery();
			while (rs.next()) {
				return true;
			}
			JDBCUtil.closeConnection(connection);
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return false;
	}
	
	public Customer selectByUserAndPass(Customer t) {
		try {
			Connection connection = JDBCUtil.getConnection();
			String url = "SELECT* FROM customers WHERE userName = ? and password = ?";
			PreparedStatement pStatement = connection.prepareStatement(url);
			pStatement.setString(1, t.getUsername());
			pStatement.setString(2, t.getPassword());
			ResultSet rs = pStatement.executeQuery();
			while (rs.next()) {
				String customerId = rs.getString("customerId");
				String customerName = rs.getString("customerName");
				String userName = rs.getString("userName");
				String password = rs.getString("password");
				String gender = rs.getString("gender");
				String address = rs.getString("address");
				String receiAddress = rs.getString("receiAddress");
				String buyAddress = rs.getString("buyAddress");
				Date dob = rs.getDate("dob");
				String phoneNumber = rs.getString("phoneNumber");
				String email = rs.getString("email");
				Integer isRecei_email = rs.getInt("isRecei_email");
				return new Customer(customerId, customerName, userName, password, gender, address, receiAddress, buyAddress, dob, phoneNumber, email, isRecei_email);
			}
			JDBCUtil.closeConnection(connection);
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}
	
	public static void main(String[] args) {
		Customer customer = new Customer("KH_004", "Le Bang", "bang", "123456","male", "Can Tho", "HCM", "HCM", Date.valueOf("1997-11-04"), "01235214555", "abc@gmail.com", 1);
		CustomerDAO.getInstance().insert(customer);
	}
}
